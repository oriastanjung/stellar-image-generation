// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: auth/auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthServiceRoutes_SignUpAdmin_FullMethodName                = "/auth.AuthServiceRoutes/SignUpAdmin"
	AuthServiceRoutes_LoginAdmin_FullMethodName                 = "/auth.AuthServiceRoutes/LoginAdmin"
	AuthServiceRoutes_SignUpUser_FullMethodName                 = "/auth.AuthServiceRoutes/SignUpUser"
	AuthServiceRoutes_LoginUser_FullMethodName                  = "/auth.AuthServiceRoutes/LoginUser"
	AuthServiceRoutes_VerifyUser_FullMethodName                 = "/auth.AuthServiceRoutes/VerifyUser"
	AuthServiceRoutes_RequestForgetPassword_FullMethodName      = "/auth.AuthServiceRoutes/RequestForgetPassword"
	AuthServiceRoutes_ResetPasswordByToken_FullMethodName       = "/auth.AuthServiceRoutes/ResetPasswordByToken"
	AuthServiceRoutes_LoginUserViaGoogle_FullMethodName         = "/auth.AuthServiceRoutes/LoginUserViaGoogle"
	AuthServiceRoutes_LoginUserViaGoogleCallback_FullMethodName = "/auth.AuthServiceRoutes/LoginUserViaGoogleCallback"
)

// AuthServiceRoutesClient is the client API for AuthServiceRoutes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceRoutesClient interface {
	SignUpAdmin(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	LoginAdmin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	SignUpUser(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error)
	RequestForgetPassword(ctx context.Context, in *RequestForgetPasswordRequest, opts ...grpc.CallOption) (*RequestForgetPasswordResponse, error)
	ResetPasswordByToken(ctx context.Context, in *ResetPasswordByTokenRequest, opts ...grpc.CallOption) (*ResetPasswordByTokenResponse, error)
	LoginUserViaGoogle(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoginGoogleResponse, error)
	LoginUserViaGoogleCallback(ctx context.Context, in *LoginGoogleRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authServiceRoutesClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceRoutesClient(cc grpc.ClientConnInterface) AuthServiceRoutesClient {
	return &authServiceRoutesClient{cc}
}

func (c *authServiceRoutesClient) SignUpAdmin(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, AuthServiceRoutes_SignUpAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceRoutesClient) LoginAdmin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthServiceRoutes_LoginAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceRoutesClient) SignUpUser(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, AuthServiceRoutes_SignUpUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceRoutesClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthServiceRoutes_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceRoutesClient) VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyUserResponse)
	err := c.cc.Invoke(ctx, AuthServiceRoutes_VerifyUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceRoutesClient) RequestForgetPassword(ctx context.Context, in *RequestForgetPasswordRequest, opts ...grpc.CallOption) (*RequestForgetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestForgetPasswordResponse)
	err := c.cc.Invoke(ctx, AuthServiceRoutes_RequestForgetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceRoutesClient) ResetPasswordByToken(ctx context.Context, in *ResetPasswordByTokenRequest, opts ...grpc.CallOption) (*ResetPasswordByTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordByTokenResponse)
	err := c.cc.Invoke(ctx, AuthServiceRoutes_ResetPasswordByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceRoutesClient) LoginUserViaGoogle(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoginGoogleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginGoogleResponse)
	err := c.cc.Invoke(ctx, AuthServiceRoutes_LoginUserViaGoogle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceRoutesClient) LoginUserViaGoogleCallback(ctx context.Context, in *LoginGoogleRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthServiceRoutes_LoginUserViaGoogleCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceRoutesServer is the server API for AuthServiceRoutes service.
// All implementations must embed UnimplementedAuthServiceRoutesServer
// for forward compatibility.
type AuthServiceRoutesServer interface {
	SignUpAdmin(context.Context, *SignUpRequest) (*SignUpResponse, error)
	LoginAdmin(context.Context, *LoginRequest) (*LoginResponse, error)
	SignUpUser(context.Context, *SignUpRequest) (*SignUpResponse, error)
	LoginUser(context.Context, *LoginRequest) (*LoginResponse, error)
	VerifyUser(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error)
	RequestForgetPassword(context.Context, *RequestForgetPasswordRequest) (*RequestForgetPasswordResponse, error)
	ResetPasswordByToken(context.Context, *ResetPasswordByTokenRequest) (*ResetPasswordByTokenResponse, error)
	LoginUserViaGoogle(context.Context, *emptypb.Empty) (*LoginGoogleResponse, error)
	LoginUserViaGoogleCallback(context.Context, *LoginGoogleRequest) (*LoginResponse, error)
	mustEmbedUnimplementedAuthServiceRoutesServer()
}

// UnimplementedAuthServiceRoutesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceRoutesServer struct{}

func (UnimplementedAuthServiceRoutesServer) SignUpAdmin(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpAdmin not implemented")
}
func (UnimplementedAuthServiceRoutesServer) LoginAdmin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAdmin not implemented")
}
func (UnimplementedAuthServiceRoutesServer) SignUpUser(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpUser not implemented")
}
func (UnimplementedAuthServiceRoutesServer) LoginUser(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedAuthServiceRoutesServer) VerifyUser(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUser not implemented")
}
func (UnimplementedAuthServiceRoutesServer) RequestForgetPassword(context.Context, *RequestForgetPasswordRequest) (*RequestForgetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestForgetPassword not implemented")
}
func (UnimplementedAuthServiceRoutesServer) ResetPasswordByToken(context.Context, *ResetPasswordByTokenRequest) (*ResetPasswordByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordByToken not implemented")
}
func (UnimplementedAuthServiceRoutesServer) LoginUserViaGoogle(context.Context, *emptypb.Empty) (*LoginGoogleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUserViaGoogle not implemented")
}
func (UnimplementedAuthServiceRoutesServer) LoginUserViaGoogleCallback(context.Context, *LoginGoogleRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUserViaGoogleCallback not implemented")
}
func (UnimplementedAuthServiceRoutesServer) mustEmbedUnimplementedAuthServiceRoutesServer() {}
func (UnimplementedAuthServiceRoutesServer) testEmbeddedByValue()                           {}

// UnsafeAuthServiceRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceRoutesServer will
// result in compilation errors.
type UnsafeAuthServiceRoutesServer interface {
	mustEmbedUnimplementedAuthServiceRoutesServer()
}

func RegisterAuthServiceRoutesServer(s grpc.ServiceRegistrar, srv AuthServiceRoutesServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceRoutesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthServiceRoutes_ServiceDesc, srv)
}

func _AuthServiceRoutes_SignUpAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceRoutesServer).SignUpAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceRoutes_SignUpAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceRoutesServer).SignUpAdmin(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceRoutes_LoginAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceRoutesServer).LoginAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceRoutes_LoginAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceRoutesServer).LoginAdmin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceRoutes_SignUpUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceRoutesServer).SignUpUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceRoutes_SignUpUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceRoutesServer).SignUpUser(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceRoutes_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceRoutesServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceRoutes_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceRoutesServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceRoutes_VerifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceRoutesServer).VerifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceRoutes_VerifyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceRoutesServer).VerifyUser(ctx, req.(*VerifyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceRoutes_RequestForgetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestForgetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceRoutesServer).RequestForgetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceRoutes_RequestForgetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceRoutesServer).RequestForgetPassword(ctx, req.(*RequestForgetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceRoutes_ResetPasswordByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceRoutesServer).ResetPasswordByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceRoutes_ResetPasswordByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceRoutesServer).ResetPasswordByToken(ctx, req.(*ResetPasswordByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceRoutes_LoginUserViaGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceRoutesServer).LoginUserViaGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceRoutes_LoginUserViaGoogle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceRoutesServer).LoginUserViaGoogle(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceRoutes_LoginUserViaGoogleCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginGoogleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceRoutesServer).LoginUserViaGoogleCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceRoutes_LoginUserViaGoogleCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceRoutesServer).LoginUserViaGoogleCallback(ctx, req.(*LoginGoogleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthServiceRoutes_ServiceDesc is the grpc.ServiceDesc for AuthServiceRoutes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthServiceRoutes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthServiceRoutes",
	HandlerType: (*AuthServiceRoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUpAdmin",
			Handler:    _AuthServiceRoutes_SignUpAdmin_Handler,
		},
		{
			MethodName: "LoginAdmin",
			Handler:    _AuthServiceRoutes_LoginAdmin_Handler,
		},
		{
			MethodName: "SignUpUser",
			Handler:    _AuthServiceRoutes_SignUpUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _AuthServiceRoutes_LoginUser_Handler,
		},
		{
			MethodName: "VerifyUser",
			Handler:    _AuthServiceRoutes_VerifyUser_Handler,
		},
		{
			MethodName: "RequestForgetPassword",
			Handler:    _AuthServiceRoutes_RequestForgetPassword_Handler,
		},
		{
			MethodName: "ResetPasswordByToken",
			Handler:    _AuthServiceRoutes_ResetPasswordByToken_Handler,
		},
		{
			MethodName: "LoginUserViaGoogle",
			Handler:    _AuthServiceRoutes_LoginUserViaGoogle_Handler,
		},
		{
			MethodName: "LoginUserViaGoogleCallback",
			Handler:    _AuthServiceRoutes_LoginUserViaGoogleCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}
